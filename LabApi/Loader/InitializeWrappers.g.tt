<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    List<string> initializeCalls = new();

    const string attribute = @$"\[InitializeWrapper(?:Attribute)?\]";

    string templateDir = Host.ResolvePath(".");
    string projectDir = Path.GetFullPath(Path.Combine(templateDir, @"..\"));

    // Recursively search for C# files in the project directory
    foreach (string file in Directory.EnumerateFiles(projectDir, "*.cs", SearchOption.AllDirectories))
    {
        string fileContent = File.ReadAllText(file);

        // Use regex to find namespace, class and method names
        Match namespaceMatch = Regex.Match(fileContent, @"namespace\s+([\w\.]+)");
        if (!namespaceMatch.Success)
            continue;
        string namespaceName = namespaceMatch.Groups[1].Value;
        int index = namespaceMatch.Index + namespaceMatch.Length;

        Match classMatch = Regex.Match(fileContent.Substring(index), @"class\s+(\w+)");
        if (!classMatch.Success)
            continue;
        string className = classMatch.Groups[1].Value;
        index = classMatch.Index + classMatch.Length;

        MatchCollection methodMatches = Regex.Matches(fileContent.Substring(index), $@"{attribute}\s+.*?\s+static\s+.*?\s+(\w+)\s*\(");        
        foreach (Match match in methodMatches)
        {
            string methodName = match.Groups[1].Value;
            initializeCalls.Add($"{namespaceName}.{className}.{methodName}();");
        }
    }
#>
// <auto-generated>
// This code was generated by InitializeWrappers.tt
// Changes to this file will be lost during the next build.
// Instead, please modify InitializeWrappers.tt (the template) or the input files.
// Any Method marked with the [InitializeWrapper] attribute will be called here.
// </auto-generated>

namespace LabApi.Loader;
public static partial class PluginLoader
{
    static partial void InitializeWrappers()
    {
<#
        foreach (string call in initializeCalls)
        {
#>
        <#= call #>
<#
        }
#>
    }
}